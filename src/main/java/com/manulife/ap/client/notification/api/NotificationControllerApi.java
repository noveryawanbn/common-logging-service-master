/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.manulife.ap.client.notification.api;

import com.manulife.ap.client.notification.model.NotificationResponse;
import com.manulife.ap.client.notification.model.NotificationStatusResponse;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "NotificationController", description = "the NotificationController API")
public interface NotificationControllerApi {

	@ApiOperation(value = "Get Notification status ", nickname = "getNotificationStatus", notes = "", response = NotificationStatusResponse.class, tags = {
			"notification-controller", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Notification status retrieved", response = NotificationStatusResponse.class),
			@ApiResponse(code = 202, message = "Pending response", response = NotificationStatusResponse.class),
			@ApiResponse(code = 400, message = "Failure response"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found"),
			@ApiResponse(code = 500, message = "Internal server error") })
	@RequestMapping(value = "/v1/markets/{market}/messages/{messageId}", produces = "application/json", consumes = "", method = RequestMethod.GET)
	ResponseEntity<NotificationStatusResponse> getNotificationStatus(
			@ApiParam(value = "market (to choose the SMTP)", required = true) @PathVariable("market") String market,
			@ApiParam(value = "messageId (unique identifier to get status)", required = true) @PathVariable("messageId") String messageId,
			@NotNull @ApiParam(value = "type of notification channel", required = true, allowableValues = "sms, email, zalo, push, tango") @Valid @RequestParam(value = "channel", required = true) String channel);

	@ApiOperation(value = "sendmessage", nickname = "sendmessage", notes = "'Common service: Send notification' ", response = NotificationResponse.class, tags = {
			"notification-controller", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful response", response = NotificationResponse.class),
			@ApiResponse(code = 201, message = "Created"),
			@ApiResponse(code = 202, message = "Pending response", response = NotificationResponse.class),
			@ApiResponse(code = 400, message = "Failure response"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found"),
			@ApiResponse(code = 500, message = "Internal Server error") })
	@RequestMapping(value = "/v1/markets/{market}/messages", produces = "application/json", consumes = "multipart/form-data", method = RequestMethod.POST)
	ResponseEntity<NotificationResponse> sendmessage(
			@ApiParam(value = "market (to choose the service provider)", required = true) @PathVariable("market") String market,
			@NotNull @ApiParam(value = "sender of the message", required = true) @Valid @RequestParam(value = "from", required = true) String from,
			@NotNull @ApiParam(value = "list of recipients of the message", required = true) @Valid @RequestParam(value = "recipients", required = true) List<String> recipients,
			@NotNull @ApiParam(value = "type of notification channel", required = true, allowableValues = "sms, email, zalo, push, tango") @Valid @RequestParam(value = "channel", required = true) String channel,
			@ApiParam(value = "content of the message (ignored if template data is present)") @Valid @RequestParam(value = "messageBody", required = false) String messageBody,
			@ApiParam(value = "ccList for email") @Valid @RequestParam(value = "ccList", required = false) List<String> ccList,
			@ApiParam(value = "name of the sender") @Valid @RequestParam(value = "senderName", required = false) String senderName,
			@ApiParam(value = "email subject") @Valid @RequestParam(value = "subject", required = false) String subject,
			@ApiParam(value = "file detail") @RequestParam("attachment1") MultipartFile attachment1,
			@ApiParam(value = "file detail") @RequestParam("attachment2") MultipartFile attachment2,
			@ApiParam(value = "file detail") @RequestParam("attachment3") MultipartFile attachment3,
			@ApiParam(value = "file detail") @RequestParam("attachment4") MultipartFile attachment4,
			@ApiParam(value = "file detail") @RequestParam("attachment5") MultipartFile attachment5,
			@ApiParam(value = "consumer app name") @Valid @RequestParam(value = "app", required = false) String app,
			@ApiParam(value = "content type of the message") @Valid @RequestParam(value = "contentType", required = false) String contentType,
			@ApiParam(value = "ocdm flag") @Valid @RequestParam(value = "useocdm", required = false) Boolean useocdm,
			@ApiParam(value = "ocdm customer id") @Valid @RequestParam(value = "customer", required = false) String customer,
			@ApiParam(value = "id of template") @Valid @RequestParam(value = "templateId", required = false) String templateId,
			@ApiParam(value = "template metadata") @Valid @RequestParam(value = "templateData", required = false) List<String> templateData,
			@ApiParam(value = "others") @Valid @RequestParam(value = "miscData", required = false) List<String> miscData);

}
